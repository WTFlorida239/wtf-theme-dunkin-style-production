{%- comment -%}
  Social Wall - Instagram Graph API, YouTube, TikTok Integration
  Uses Instagram Graph API for Business (NOT Basic Display API which is deprecated)
  
  Configuration via Metafields (namespace: social):
  - social.instagram_token: Instagram Business/Creator access token
  - social.instagram_user_id: Instagram Business account ID
  - social.youtube_api_key: YouTube Data API v3 key
  - social.youtube_channel_id: YouTube channel ID
  - social.tiktok_username: TikTok username (for embed widgets)
{%- endcomment -%}

<div class="social-wall-container">
  <header class="social-wall-header">
    <h1 class="social-wall-title">🌟 WTF Community</h1>
    <p class="social-wall-subtitle">Join the wellness revolution - see what our community is creating!</p>
  </header>

  {%- comment -%} Filter tabs {%- endcomment -%}
  <div class="social-filters">
    <button class="social-filter active" data-filter="all">All</button>
    <button class="social-filter" data-filter="instagram">
      <svg class="filter-icon" viewBox="0 0 24 24" width="16" height="16">
        <path fill="currentColor" d="M7.8,2H16.2C19.4,2 22,4.6 22,7.8V16.2A5.8,5.8 0 0,1 16.2,22H7.8C4.6,22 2,19.4 2,16.2V7.8A5.8,5.8 0 0,1 7.8,2M7.6,4A3.6,3.6 0 0,0 4,7.6V16.4C4,18.39 5.61,20 7.6,20H16.4A3.6,3.6 0 0,0 20,16.4V7.6C20,5.61 18.39,4 16.4,4H7.6M17.25,5.5A1.25,1.25 0 0,1 18.5,6.75A1.25,1.25 0 0,1 17.25,8A1.25,1.25 0 0,1 16,6.75A1.25,1.25 0 0,1 17.25,5.5M12,7A5,5 0 0,1 17,12A5,5 0 0,1 12,17A5,5 0 0,1 7,12A5,5 0 0,1 12,7M12,9A3,3 0 0,0 9,12A3,3 0 0,0 12,15A3,3 0 0,0 15,12A3,3 0 0,0 12,9Z"/>
      </svg>
      Instagram
    </button>
    <button class="social-filter" data-filter="youtube">
      <svg class="filter-icon" viewBox="0 0 24 24" width="16" height="16">
        <path fill="currentColor" d="M10,15L15.19,12L10,9V15M21.56,7.17C21.69,7.64 21.78,8.27 21.84,9.07C21.91,9.87 21.94,10.56 21.94,11.16L22,12C22,14.19 21.84,15.8 21.56,16.83C21.31,17.73 20.73,18.31 19.83,18.56C19.36,18.69 18.5,18.78 17.18,18.84C15.88,18.91 14.69,18.94 13.59,18.94L12,19C7.81,19 5.2,18.84 4.17,18.56C3.27,18.31 2.69,17.73 2.44,16.83C2.31,16.36 2.22,15.73 2.16,14.93C2.09,14.13 2.06,13.44 2.06,12.84L2,12C2,9.81 2.16,8.2 2.44,7.17C2.69,6.27 3.27,5.69 4.17,5.44C4.64,5.31 5.5,5.22 6.82,5.16C8.12,5.09 9.31,5.06 10.41,5.06L12,5C16.19,5 18.8,5.16 19.83,5.44C20.73,5.69 21.31,6.27 21.56,7.17Z"/>
      </svg>
      YouTube
    </button>
    <button class="social-filter" data-filter="tiktok">
      <svg class="filter-icon" viewBox="0 0 24 24" width="16" height="16">
        <path fill="currentColor" d="M16.6,5.82C15.9,5.33 15.45,4.5 15.45,3.56A0.06,0.06 0 0,0 15.39,3.5H12.25V13.77C12.25,13.77 12.25,13.77 12.25,13.78C12.25,14.81 11.41,15.65 10.38,15.65C9.35,15.65 8.5,14.81 8.5,13.78C8.5,12.74 9.35,11.9 10.38,11.9C10.6,11.9 10.81,11.94 11,12L11,8.82A5.53,5.53 0 0,0 10.38,8.72A5.68,5.68 0 0,0 4.7,14.4A5.68,5.68 0 0,0 10.38,20.08C13.37,20.08 15.8,17.65 15.8,14.66V9.12C16.97,9.88 18.34,10.31 19.81,10.31V7.18A4.42,4.42 0 0,1 16.6,5.82Z"/>
      </svg>
      TikTok
    </button>
  </div>

  {%- comment -%} Social grid {%- endcomment -%}
  <div class="social-grid" id="social-grid">
    <div class="social-loading">
      <div class="loading-spinner"></div>
      <p>Loading social content...</p>
    </div>
  </div>

  {%- comment -%} Load more button {%- endcomment -%}
  <div class="social-load-more">
    <button class="load-more-btn" id="load-more" style="display:none;">
      Load More Posts
    </button>
  </div>
</div>

<style>
  .social-wall-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  .social-wall-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .social-wall-title {
    font-size: 2.5rem;
    font-weight: 800;
    color: #333;
    margin-bottom: 0.5rem;
    background: linear-gradient(135deg, #ff6b35, #f7931e);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .social-wall-subtitle {
    font-size: 1.1rem;
    color: #666;
  }

  .social-filters {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-bottom: 2rem;
    flex-wrap: wrap;
  }

  .social-filter {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    background: white;
    border: 2px solid #dee2e6;
    border-radius: 25px;
    font-weight: 600;
    color: #495057;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .social-filter:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
  }

  .social-filter.active {
    background: linear-gradient(135deg, #ff6b35, #f7931e);
    color: white;
    border-color: #ff6b35;
  }

  .filter-icon {
    width: 20px;
    height: 20px;
  }

  .social-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-bottom: 3rem;
  }

  .social-post {
    background: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0,0,0,0.08);
    transition: all 0.3s ease;
    cursor: pointer;
    animation: fadeIn 0.5s ease;
  }

  .social-post:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 24px rgba(0,0,0,0.15);
  }

  .social-post.hidden {
    display: none;
  }

  .post-media {
    position: relative;
    padding-bottom: 100%; /* 1:1 aspect ratio */
    overflow: hidden;
    background: #f8f9fa;
  }

  .post-media.video {
    padding-bottom: 56.25%; /* 16:9 for videos */
  }

  .post-media img,
  .post-media video {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .post-overlay {
    position: absolute;
    top: 10px;
    right: 10px;
    background: rgba(0,0,0,0.7);
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 600;
  }

  .post-content {
    padding: 1rem;
  }

  .post-header {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
  }

  .post-avatar {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background: linear-gradient(135deg, #ff6b35, #f7931e);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: 700;
    font-size: 0.9rem;
  }

  .post-username {
    font-weight: 600;
    color: #333;
    font-size: 0.9rem;
  }

  .post-time {
    color: #999;
    font-size: 0.75rem;
  }

  .post-caption {
    color: #495057;
    line-height: 1.5;
    font-size: 0.9rem;
    margin-bottom: 0.75rem;
    overflow: hidden;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
  }

  .post-stats {
    display: flex;
    gap: 1.5rem;
    padding-top: 0.75rem;
    border-top: 1px solid #f0f0f0;
  }

  .post-stat {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    color: #666;
    font-size: 0.85rem;
  }

  .social-loading {
    grid-column: 1 / -1;
    text-align: center;
    padding: 3rem;
  }

  .loading-spinner {
    width: 50px;
    height: 50px;
    margin: 0 auto 1rem;
    border: 4px solid #f3f3f3;
    border-top: 4px solid #ff6b35;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  .load-more-btn {
    background: linear-gradient(135deg, #ff6b35, #f7931e);
    color: white;
    border: none;
    padding: 1rem 3rem;
    border-radius: 30px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    display: block;
    margin: 0 auto;
  }

  .load-more-btn:hover {
    transform: scale(1.05);
    box-shadow: 0 8px 20px rgba(255, 107, 53, 0.3);
  }

  .social-error {
    grid-column: 1 / -1;
    text-align: center;
    padding: 3rem;
    background: #fff3cd;
    border-radius: 12px;
    color: #856404;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  @media (max-width: 768px) {
    .social-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .social-wall-title {
      font-size: 2rem;
    }

    .social-filter {
      font-size: 0.9rem;
      padding: 0.5rem 1rem;
    }
  }
</style>

<script>
(function() {
  'use strict';

  const INSTAGRAM_TOKEN = '{{ shop.metafields.social.instagram_token }}';
  const INSTAGRAM_USER_ID = '{{ shop.metafields.social.instagram_user_id }}';
  const YOUTUBE_API_KEY = '{{ shop.metafields.social.youtube_api_key }}';
  const YOUTUBE_CHANNEL_ID = '{{ shop.metafields.social.youtube_channel_id }}';
  const TIKTOK_USERNAME = '{{ shop.metafields.social.tiktok_username | default: "wtfswag" }}';

  let allPosts = [];
  let displayedPosts = 0;
  const postsPerLoad = 12;
  let currentFilter = 'all';

  // Mock data for demonstration (replace with actual API calls)
  const mockData = {
    instagram: [
      {
        id: 'ig1',
        type: 'instagram',
        media_type: 'IMAGE',
        media_url: '{{ "kratom_teas_150x150.png" | asset_url }}',
        caption: 'Loving our new Kratom Tea blend! Perfect afternoon pick-me-up ☕ #WTFSwag #KratomTea',
        timestamp: new Date(Date.now() - 3600000).toISOString(),
        likes: 245,
        comments: 18,
        username: 'wtfswag_customer'
      },
      {
        id: 'ig2',
        type: 'instagram',
        media_type: 'VIDEO',
        media_url: '{{ "kava_drinks_150x150.png" | asset_url }}',
        thumbnail_url: '{{ "kava_drinks_150x150.png" | asset_url }}',
        caption: 'Friday vibes with our Kava special! 🌺 Relaxation mode: ON',
        timestamp: new Date(Date.now() - 7200000).toISOString(),
        likes: 532,
        comments: 42,
        username: 'wellness_warrior'
      }
    ],
    youtube: [
      {
        id: 'yt1',
        type: 'youtube',
        media_type: 'VIDEO',
        media_url: '{{ "thc_drinks_150x150.png" | asset_url }}',
        caption: 'How to Make the Perfect THC Drink | WTF Tutorial',
        timestamp: new Date(Date.now() - 86400000).toISOString(),
        views: 1532,
        likes: 89,
        username: 'WTF Swag'
      }
    ],
    tiktok: [
      {
        id: 'tt1',
        type: 'tiktok',
        media_type: 'VIDEO',
        media_url: '{{ "draft_pours_150x150.png" | asset_url }}',
        caption: 'POV: You discover the best wellness drinks in town 🔥 #WTFSwag #Wellness',
        timestamp: new Date(Date.now() - 172800000).toISOString(),
        likes: 2841,
        comments: 156,
        username: '@wtf_vibes'
      }
    ]
  };

  function formatTimeAgo(timestamp) {
    const date = new Date(timestamp);
    const now = new Date();
    const seconds = Math.floor((now - date) / 1000);
    
    if (seconds < 60) return 'just now';
    if (seconds < 3600) return Math.floor(seconds / 60) + 'm ago';
    if (seconds < 86400) return Math.floor(seconds / 3600) + 'h ago';
    if (seconds < 2592000) return Math.floor(seconds / 86400) + 'd ago';
    
    return date.toLocaleDateString();
  }

  function createPostElement(post) {
    const isVideo = post.media_type === 'VIDEO';
    const mediaUrl = isVideo && post.thumbnail_url ? post.thumbnail_url : post.media_url;
    
    return `
      <article class="social-post" data-type="${post.type}" data-id="${post.id}">
        <div class="post-media ${isVideo ? 'video' : ''}">
          <img src="${mediaUrl}" alt="${post.caption}" loading="lazy">
          <div class="post-overlay">
            ${post.type === 'instagram' ? '📷' : post.type === 'youtube' ? '▶️' : '🎵'}
            ${post.type}
          </div>
        </div>
        <div class="post-content">
          <div class="post-header">
            <div class="post-avatar">${post.username.charAt(0).toUpperCase()}</div>
            <div>
              <div class="post-username">${post.username}</div>
              <div class="post-time">${formatTimeAgo(post.timestamp)}</div>
            </div>
          </div>
          <p class="post-caption">${post.caption}</p>
          <div class="post-stats">
            ${post.likes !== undefined ? `
              <div class="post-stat">
                ❤️ ${post.likes.toLocaleString()}
              </div>
            ` : ''}
            ${post.comments !== undefined ? `
              <div class="post-stat">
                💬 ${post.comments.toLocaleString()}
              </div>
            ` : ''}
            ${post.views !== undefined ? `
              <div class="post-stat">
                👁️ ${post.views.toLocaleString()} views
              </div>
            ` : ''}
          </div>
        </div>
      </article>
    `;
  }

  function loadPosts() {
    const grid = document.getElementById('social-grid');
    
    // Combine all posts and sort by timestamp
    allPosts = [
      ...mockData.instagram,
      ...mockData.youtube,
      ...mockData.tiktok
    ].sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

    // Filter posts based on current filter
    let filteredPosts = currentFilter === 'all' 
      ? allPosts 
      : allPosts.filter(post => post.type === currentFilter);

    // Get posts to display
    const postsToShow = filteredPosts.slice(displayedPosts, displayedPosts + postsPerLoad);
    
    if (postsToShow.length === 0 && displayedPosts === 0) {
      grid.innerHTML = `
        <div class="social-error">
          <h3>No posts found</h3>
          <p>We're working on connecting our social feeds. Check back soon!</p>
        </div>
      `;
      return;
    }

    // Clear loading state on first load
    if (displayedPosts === 0) {
      grid.innerHTML = '';
    }

    // Add posts to grid
    postsToShow.forEach(post => {
      grid.insertAdjacentHTML('beforeend', createPostElement(post));
    });

    displayedPosts += postsToShow.length;

    // Show/hide load more button
    const loadMoreBtn = document.getElementById('load-more');
    if (displayedPosts < filteredPosts.length) {
      loadMoreBtn.style.display = 'block';
    } else {
      loadMoreBtn.style.display = 'none';
    }
  }

  function filterPosts(filter) {
    currentFilter = filter;
    displayedPosts = 0;
    document.getElementById('social-grid').innerHTML = '';
    loadPosts();

    // Update active filter button
    document.querySelectorAll('.social-filter').forEach(btn => {
      btn.classList.toggle('active', btn.dataset.filter === filter);
    });
  }

  // Initialize
  document.addEventListener('DOMContentLoaded', function() {
    // Load initial posts
    loadPosts();

    // Filter buttons
    document.querySelectorAll('.social-filter').forEach(btn => {
      btn.addEventListener('click', () => {
        filterPosts(btn.dataset.filter);
      });
    });

    // Load more button
    document.getElementById('load-more').addEventListener('click', loadPosts);

    // Post click handler (open in new tab)
    document.getElementById('social-grid').addEventListener('click', (e) => {
      const post = e.target.closest('.social-post');
      if (post) {
        const type = post.dataset.type;
        const id = post.dataset.id;
        
        // In production, this would link to actual social media posts
        console.log(`Opening ${type} post: ${id}`);
        
        // Example URLs (replace with actual URLs from API)
        const urls = {
          instagram: `https://instagram.com/p/${id}`,
          youtube: `https://youtube.com/watch?v=${id}`,
          tiktok: `https://tiktok.com/@wtfswag/video/${id}`
        };
        
        // window.open(urls[type], '_blank');
      }
    });
  });

  // Real Instagram Graph API implementation (commented for reference)
  /*
  async function fetchInstagramPosts() {
    if (!INSTAGRAM_TOKEN || !INSTAGRAM_USER_ID) return [];
    
    const fields = 'id,media_type,media_url,thumbnail_url,caption,timestamp,like_count,comments_count';
    const url = `https://graph.instagram.com/${INSTAGRAM_USER_ID}/media?fields=${fields}&access_token=${INSTAGRAM_TOKEN}&limit=20`;
    
    try {
      const response = await fetch(url);
      const data = await response.json();
      return data.data.map(post => ({
        ...post,
        type: 'instagram',
        likes: post.like_count,
        comments: post.comments_count,
        username: 'wtfswag'
      }));
    } catch (error) {
      console.error('Instagram API error:', error);
      return [];
    }
  }
  */

  // Real YouTube Data API implementation (commented for reference)
  /*
  async function fetchYouTubePosts() {
    if (!YOUTUBE_API_KEY || !YOUTUBE_CHANNEL_ID) return [];
    
    const url = `https://www.googleapis.com/youtube/v3/search?part=snippet&channelId=${YOUTUBE_CHANNEL_ID}&maxResults=10&order=date&type=video&key=${YOUTUBE_API_KEY}`;
    
    try {
      const response = await fetch(url);
      const data = await response.json();
      return data.items.map(item => ({
        id: item.id.videoId,
        type: 'youtube',
        media_type: 'VIDEO',
        media_url: `https://i.ytimg.com/vi/${item.id.videoId}/maxresdefault.jpg`,
        caption: item.snippet.title,
        timestamp: item.snippet.publishedAt,
        username: item.snippet.channelTitle
      }));
    } catch (error) {
      console.error('YouTube API error:', error);
      return [];
    }
  }
  */
})();
</script>