{%- comment -%}
  Google Business Profile Hours Integration for WTF | Welcome To Florida
 
  Usage: {% render 'gbp-hours', location_id: 'main' %}
 
  This component now reads hours from a single JSON metafield for easier management.
 
  Metafield Structure (Shop Metafield):
  - Namespace: custom
  - Key: business_hours
  - Type: JSON
  - Required Schema Value:
    [
      {"day": "Sunday", "hours": "8:00 AM - 8:00 PM"},
      {"day": "Monday", "hours": "8:00 AM - 8:00 PM"},
      {"day": "Tuesday", "hours": "8:00 AM - 8:00 PM"},
      {"day": "Wednesday", "hours": "8:00 AM - 8:00 PM"},
      {"day": "Thursday", "hours": "8:00 AM - 8:00 PM"},
      {"day": "Friday", "hours": "8:00 AM - 10:00 PM"},
      {"day": "Saturday", "hours": "8:00 AM - 10:00 PM"}
    ]
 
  Fallback: Uses hardcoded grouped hours if the metafield is not set.
{%- endcomment -%}

{%- assign location_id = location_id | default: 'main' -%}

<div class="gbp-hours" data-location="{{ location_id }}">
  <div class="gbp-hours__header">
    <h3 class="gbp-hours__title">
      üìç {{ shop.metafields.business.location_name | default: 'WTF | Welcome To Florida' }}
    </h3>
    <p class="gbp-hours__address">{{ shop.metafields.business.location_address | default: '1520 SE 46th Ln Unit B Cape Coral, FL 33904' }}</p>
  </div>

  <div class="gbp-hours__schedule">
    {%- assign hours_json = shop.metafields.custom.business_hours | default: '' -%}
    {%- if hours_json != '' -%}
      {%- comment -%} Use JSON Metafield hours {%- endcomment -%}
      {%- assign hours = hours_json | json_parse -%}
      <div class="gbp-hours__days">
        {%- for item in hours -%}
          <div class="gbp-hours__day" data-day="{{ item.day | downcase }}">
            <span class="gbp-hours__day-name">{{ item.day }}</span>
            <span class="gbp-hours__day-time">{{ item.hours }}</span>
          </div>
        {%- endfor -%}
      </div>
    {%- else -%}
      {%- comment -%} Fallback hours when JSON metafield is not configured {%- endcomment -%}
      <div class="gbp-hours__days">
        <div class="gbp-hours__day" data-day="sunday,monday,tuesday,wednesday,thursday">
          <span class="gbp-hours__day-name">Sunday - Thursday</span>
          <span class="gbp-hours__day-time">8:00 AM - 8:00 PM</span>
        </div>
        <div class="gbp-hours__day" data-day="friday,saturday">
          <span class="gbp-hours__day-name">Friday - Saturday</span>
          <span class="gbp-hours__day-time">8:00 AM - 10:00 PM</span>
        </div>
      </div>
      <p class="gbp-hours__special">‚ÑπÔ∏è Holiday hours may vary</p>
    {%- endif -%}
  </div>

  {%- comment -%} Live status indicator {%- endcomment -%}
  <div class="gbp-hours__status" id="gbp-status-{{ location_id }}">
    <span class="gbp-hours__status-indicator"></span>
    <span class="gbp-hours__status-text">Checking status...</span>
  </div>
</div>

<style>
  .gbp-hours {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 4px 12px rgba(0,0,0,0.08);
    margin: 1rem 0;
    max-width: 400px;
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  }
  .gbp-hours__header {
    border-bottom: 1px solid #f1f1f1;
    padding-bottom: 1rem;
    margin-bottom: 1rem;
  }
  .gbp-hours__title {
    font-size: 1.25rem;
    font-weight: 700;
    color: #333;
    margin: 0 0 0.5rem 0;
  }
  .gbp-hours__address {
    color: #666;
    margin: 0;
    font-size: 0.9rem;
  }
  .gbp-hours__days {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  .gbp-hours__day {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem;
    background: #f8f9fa;
    border-radius: 8px;
    transition: background 0.2s ease;
  }
  .gbp-hours__day-name {
    font-weight: 600;
    color: #495057;
  }
  .gbp-hours__day-time {
    color: #333;
    font-weight: 500;
  }
  .gbp-hours__special {
    margin-top: 1rem;
    padding: 0.75rem;
    background: #fff3cd;
    border-radius: 8px;
    color: #856404;
    font-size: 0.9rem;
    text-align: center;
  }
  .gbp-hours__status {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-top: 1rem;
    padding: 0.75rem;
    background: #f8f9fa;
    border-radius: 8px;
  }
  .gbp-hours__status-indicator {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: #ffc107; /* Yellow for loading */
    flex-shrink: 0;
  }
  .gbp-hours__status-indicator.open {
    background: #28a745;
    animation: pulse 2s infinite;
  }
  .gbp-hours__status-indicator.closed {
    background: #dc3545;
  }
  .gbp-hours__status-text {
    font-size: 0.9rem;
    font-weight: 500;
    color: #495057;
  }
  @keyframes pulse {
    0% { transform: scale(1); box-shadow: 0 0 0 0 rgba(40, 167, 69, 0.7); }
    70% { transform: scale(1); box-shadow: 0 0 0 10px rgba(40, 167, 69, 0); }
    100% { transform: scale(1); box-shadow: 0 0 0 0 rgba(40, 167, 69, 0); }
  }
</style>

<script>
  (function() {
    function checkStoreStatus(locationId) {
      const gbpComponent = document.querySelector(`.gbp-hours[data-location="${locationId}"]`);
      if (!gbpComponent) return;
      const statusEl = gbpComponent.querySelector(`#gbp-status-${locationId}`);
      if (!statusEl) return;

      // Dynamically build hoursData from the DOM to ensure it always matches what's displayed
      const hoursData = {};
      gbpComponent.querySelectorAll('.gbp-hours__day').forEach(dayEl => {
        const dayNames = (dayEl.dataset.day || dayEl.querySelector('.gbp-hours__day-name').textContent.trim()).toLowerCase();
        const timeRange = dayEl.querySelector('.gbp-hours__day-time').textContent.trim();
        
        dayNames.split(/,|-/).forEach(dayName => {
          hoursData[dayName.trim()] = timeRange;
        });
      });

      const now = new Date();
      const day = now.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
      const currentTime = now.getHours() * 60 + now.getMinutes();
      
      function parseTime(timeStr) {
        if (!timeStr) return 0;
        const [time, period] = timeStr.trim().split(' ');
        let [hours, minutes] = time.split(':').map(Number);
        if (period && period.toLowerCase() === 'pm' && hours !== 12) hours += 12;
        if (period && period.toLowerCase() === 'am' && hours === 12) hours = 0; // Midnight case
        return hours * 60 + (minutes || 0);
      }

      const todayHours = hoursData[day];
      if (todayHours && todayHours.toLowerCase() !== 'closed') {
        const [openTime, closeTime] = todayHours.split(' - ').map(parseTime);
        const isOpen = currentTime >= openTime && currentTime < closeTime;

        const indicator = statusEl.querySelector('.gbp-hours__status-indicator');
        const text = statusEl.querySelector('.gbp-hours__status-text');
        
        indicator.className = 'gbp-hours__status-indicator'; // Reset classes
        indicator.classList.add(isOpen ? 'open' : 'closed');

        if (isOpen) {
          const closingIn = closeTime - currentTime;
          if (closingIn <= 60) {
            text.textContent = `Open now ¬∑ Closes in ${closingIn} min`;
            text.style.color = '#e67e22';
          } else {
            text.textContent = 'Open now';
            text.style.color = '#28a745';
          }
        } else {
          if (currentTime < openTime) {
            const openingIn = openTime - currentTime;
            const hours = Math.floor(openingIn / 60);
            const mins = openingIn % 60;
            text.textContent = `Closed ¬∑ Opens in ${hours}h ${mins}m`;
          } else {
            text.textContent = 'Closed for the day';
          }
          text.style.color = '#dc3545';
        }
      } else {
         // Handle case where today is not in the list or is explicitly closed
        const indicator = statusEl.querySelector('.gbp-hours__status-indicator');
        const text = statusEl.querySelector('.gbp-hours__status-text');
        indicator.className = 'gbp-hours__status-indicator closed';
        text.textContent = 'Closed';
        text.style.color = '#dc3545';
      }
    }

    document.addEventListener('DOMContentLoaded', function() {
      const locationId = '{{ location_id }}';
      checkStoreStatus(locationId);
      setInterval(() => checkStoreStatus(locationId), 60000); // Update every minute
    });
  })();
</script>
